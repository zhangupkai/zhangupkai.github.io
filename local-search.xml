<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MongoDB集群之副本集（docker-compose部署）</title>
    <link href="/2023/07/22/MongoDB%E9%9B%86%E7%BE%A4%E4%B9%8B%E5%89%AF%E6%9C%AC%E9%9B%86%EF%BC%88docker-compose%E9%83%A8%E7%BD%B2%EF%BC%89/"/>
    <url>/2023/07/22/MongoDB%E9%9B%86%E7%BE%A4%E4%B9%8B%E5%89%AF%E6%9C%AC%E9%9B%86%EF%BC%88docker-compose%E9%83%A8%E7%BD%B2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.cnblogs.com/evescn/p/16203350.html">MongoDB 3 副本集群（Docker-compose部署）（单机模式）</a><br><a href="https://docs.ucloud.cn/udb-mongodb/quick/con-replicaset?id=%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%89%AF%E6%9C%AC%E9%9B%86%E6%A8%A1%E5%BC%8F%E8%BF%9E%E6%8E%A5">如何通过副本集模式连接?</a></p></blockquote><h3 id="生成keyFile"><a href="#生成keyFile" class="headerlink" title="生成keyFile"></a>生成keyFile</h3><ul><li>MongoDB使用keyfile认证，副本集中的每个mongod实例使用keyfile内容作为认证其他成员的共享密码。mongod实例只有拥有正确的keyfile才可以加入副本集。</li><li>keyFile的内容必须是6到1024个字符的长度，且副本集所有成员的keyFile内容必须相同。</li><li>可以使用任意方法生成keyFile。例如，如下操作使用openssl生成复杂的随机的1024个字符串。然后使用chmod修改文件权限，只给文件拥有者提供读权限。这是MongoDB官方推荐keyFile的生成方式。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 400权限是要保证安全性，否则mongod启动会报错</span><br>openssl rand -<span class="hljs-built_in">base64</span> 756 &gt; mongodb.key<br><span class="hljs-built_in">chmod</span> 400 mongodb.key<br></code></pre></td></tr></table></figure><h3 id="docker-compose-yml-文件信息"><a href="#docker-compose-yml-文件信息" class="headerlink" title="docker-compose.yml 文件信息"></a><code>docker-compose.yml</code> 文件信息</h3><h4 id="服务器1：包含1个主节点和2个从节点"><a href="#服务器1：包含1个主节点和2个从节点" class="headerlink" title="服务器1：包含1个主节点和2个从节点"></a>服务器1：包含1个主节点和2个从节点</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mongo_primary:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.2</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo_primary</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;27017:27017&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_primary/data:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_primary/configdb:/data/configdb</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_primary/mongodb.key:/mongodb.key</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongoNet</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">mongod</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">rs0</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/mongodb.key</span><br>    <span class="hljs-attr">entrypoint:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        chmod 400 /mongodb.key</span><br><span class="hljs-string">        chown 999:999 /mongodb.key</span><br><span class="hljs-string">        exec docker-entrypoint.sh $$@</span><br><span class="hljs-string"></span>  <span class="hljs-attr">mongo_secondary1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.2</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo_secondary1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;27018:27017&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary1/data:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary1/configdb:/data/configdb</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary1/mongodb.key:/mongodb.key</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongoNet</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">mongod</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">rs0</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/mongodb.key</span><br>    <span class="hljs-attr">entrypoint:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        chmod 400 /mongodb.key</span><br><span class="hljs-string">        chown 999:999 /mongodb.key</span><br><span class="hljs-string">        exec docker-entrypoint.sh $$@</span><br><span class="hljs-string"></span>  <span class="hljs-attr">mongo_secondary2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.2</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo_secondary2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;27019:27017&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary2/data:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary2/configdb:/data/configdb</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary2/mongodb.key:/mongodb.key</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongoNet</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">mongod</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">rs0</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/mongodb.key</span><br>    <span class="hljs-attr">entrypoint:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        chmod 400 /mongodb.key</span><br><span class="hljs-string">        chown 999:999 /mongodb.key</span><br><span class="hljs-string">        exec docker-entrypoint.sh $$@</span><br><span class="hljs-string"></span><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">mongoNet:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure><h4 id="服务器2：包含2个从节点"><a href="#服务器2：包含2个从节点" class="headerlink" title="服务器2：包含2个从节点"></a>服务器2：包含2个从节点</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mongo_secondary_release1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.2</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo_secondary_release1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;27018:27017&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary_release1/data:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary_release1/configdb:/data/configdb</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary_release1/mongodb.key:/mongodb.key</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongoNet</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">mongod</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">rs0</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/mongodb.key</span><br>    <span class="hljs-attr">entrypoint:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        chmod 400 /mongodb.key</span><br><span class="hljs-string">        chown 999:999 /mongodb.key</span><br><span class="hljs-string">        exec docker-entrypoint.sh $$@</span><br><span class="hljs-string"></span>  <span class="hljs-attr">mongo_secondary_release2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.2</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo_secondary_release2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;27019:27017&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary_release2/data:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary_release2/configdb:/data/configdb</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mongodb/mongo_secondary_release2/mongodb.key:/mongodb.key</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongoNet</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">mongod</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">rs0</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/mongodb.key</span><br>    <span class="hljs-attr">entrypoint:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        chmod 400 /mongodb.key</span><br><span class="hljs-string">        chown 999:999 /mongodb.key</span><br><span class="hljs-string">        exec docker-entrypoint.sh $$@</span><br><span class="hljs-string"></span><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">mongoNet:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure><h3 id="配置宿主机文件及目录"><a href="#配置宿主机文件及目录" class="headerlink" title="配置宿主机文件及目录"></a>配置宿主机文件及目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以主节点为例，其余几个从节点同理</span><br><span class="hljs-built_in">mkdir</span> data/mongodb/mongo_secondary_primary/data<br><span class="hljs-built_in">mkdir</span> data/mongodb/mongo_secondary_primary/configdb<br><span class="hljs-built_in">cp</span> mongodb.key data/mongodb/mongo_secondary_primary/<br></code></pre></td></tr></table></figure><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h3><h4 id="进入主节点的-Mongo-容器并登录"><a href="#进入主节点的-Mongo-容器并登录" class="headerlink" title="进入主节点的 Mongo 容器并登录"></a>进入主节点的 <code>Mongo</code> 容器并登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mongo_primary bash<br><span class="hljs-comment"># 登录Mongo</span><br>mongo -u root -p password<br></code></pre></td></tr></table></figure><h4 id="用户认证测试"><a href="#用户认证测试" class="headerlink" title="用户认证测试"></a>用户认证测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 认证</span><br>&gt; use admin<br>&gt; db.auth(<span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>)<br></code></pre></td></tr></table></figure><p>成功返回1，失败返回0。</p><h3 id="使用配置文件初始化集群"><a href="#使用配置文件初始化集群" class="headerlink" title="使用配置文件初始化集群"></a>使用配置文件初始化集群</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>服务器 1 和服务器 2 的ip地址分别为 <code>192.168.0.1</code> 和 <code>192.168.0.2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; config=&#123;_id:<span class="hljs-string">&quot;rs0&quot;</span>,members:[ <br>&#123;_id:0,host:<span class="hljs-string">&quot;192.168.0.1:27017&quot;</span>&#125;, <br>&#123;_id:1,host:<span class="hljs-string">&quot;192.168.0.1:27018&quot;</span>&#125;, <br>&#123;_id:2,host:<span class="hljs-string">&quot;192.168.0.1:27019&quot;</span>&#125;,<br>&#123;_id:3,host:<span class="hljs-string">&quot;192.168.0.2:27018&quot;</span>&#125;,<br>&#123;_id:4,host:<span class="hljs-string">&quot;192.168.0.2:27019&quot;</span>&#125;<br>] &#125;<br></code></pre></td></tr></table></figure><h4 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; rs.initiate(config)<br></code></pre></td></tr></table></figure><h4 id="增长-mongo-primary-和-mongo-secondary1-的权重"><a href="#增长-mongo-primary-和-mongo-secondary1-的权重" class="headerlink" title="增长 mongo_primary 和 mongo_secondary1 的权重"></a>增长 <code>mongo_primary</code> 和 <code>mongo_secondary1</code> 的权重</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; cfg = rs.conf()<br><br><span class="hljs-comment"># 修改权重</span><br>&gt; cfg.members[0].priority=5<br>&gt; cfg.members[1].priority=3<br><br><span class="hljs-comment"># 从新配置</span><br>&gt; rs.reconfig(cfg)<br></code></pre></td></tr></table></figure><h4 id="验证副本集"><a href="#验证副本集" class="headerlink" title="验证副本集"></a>验证副本集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换节点查看同步状态：</span><br>&gt; rs.printReplicationInfo()<br><span class="hljs-comment"># 仅当建立了集合后副节点才会进行同步</span><br></code></pre></td></tr></table></figure><h3 id="连接-Mongo-副本集"><a href="#连接-Mongo-副本集" class="headerlink" title="连接 Mongo 副本集"></a>连接 <code>Mongo</code> 副本集</h3><p>副本集模式连接指的是把副本集看作一个整体，自动探测现在的主节点并进行连接的模式。这样能够做到，无论现在副本集哪个是主节点，客户端都可以连到正确的节点上，并且切换后不需要额外修改客户端的程序。同时，结合 <code>readPreference</code> 参数，能够做类似写操作在主库进行，读操作在从库进行的”读写分离“功能。</p><h4 id="连接-url"><a href="#连接-url" class="headerlink" title="连接 url"></a>连接 url</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mongodb</span>://root:password@<span class="hljs-number">192.168.0.1</span>,<span class="hljs-number">192.168.0.1</span>/?replicaSet=rs0&amp;readPreference=secondaryPreferred<br></code></pre></td></tr></table></figure><p>其中，<code>replicaSet</code> 为副本集名称，<code>readPreference</code> 参数能够实现写操作在主库进行，读操作在从库进行的”读写分离“功能。 它有这么几个值：</p><ul><li><code>primary</code>: 读请求全部走primary (secondary节点纯粹是做高可用的容灾使用)：这个是最经典的连接方法，把副本集当作一个纯粹的高可用集群使用，而且肯定能保证读到的数据是最准确的。</li><li><code>secondary</code>: 写请求全部走primary，读请求全部走secondary。这个是把副本集作为读写分离集群来使用。他能提高读操作的吞吐（通过添加多个secondary的方法）。但是它的缺点是可能读到的数据和主库是不一致的。所以在对于数据一致性有较高的场景下慎用。</li><li><code>primaryPreferred</code>: 优先走primary，只有少数情况才去secondary读取数据。</li><li><code>secondaryPreferred</code>: 优先走secondary，只有少数情况才去primary读取数据。</li><li><code>nearest</code>：根据客户端到各个节点的延时选择节点：如果延时在某个阈值内，随机选择节点；如果所有节点延时在某个阈值外，选择延时最小的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git日常操作</title>
    <link href="/2023/04/19/Git%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/04/19/Git%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="将-Fork-至自己仓库的项目代码同步至本地，并更新到自己的仓库"><a href="#将-Fork-至自己仓库的项目代码同步至本地，并更新到自己的仓库" class="headerlink" title="将 Fork 至自己仓库的项目代码同步至本地，并更新到自己的仓库"></a>将 Fork 至自己仓库的项目代码同步至本地，并更新到自己的仓库</h3><blockquote><p><a href="https://blog.csdn.net/j754379117/article/details/72890717">github如何更新fork的代码</a></p></blockquote><ol><li>增加源分支都自己项目的远程分支列表，并命名原来的项目分支，此处命名为 zcs</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git remote add zcs https://gitee.com/FE-zhuchaoshi/haowuquan-op.git<br></code></pre></td></tr></table></figure><ol start="2"><li>查看远程分支列表：origin 为自己仓库的远程分支， zcs 为 fork 的项目源分支</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">git remote -v<br>origin  https://gitee.com/zhangshangkai/haowuquan-op.git (fetch)<br>origin  https://gitee.com/zhangshangkai/haowuquan-op.git (push) <br>zcs     https://gitee.com/FE-zhuchaoshi/haowuquan-op.git (fetch)<br>zcs     https://gitee.com/FE-zhuchaoshi/haowuquan-op.git (push)<br></code></pre></td></tr></table></figure><ol start="3"><li>从 fork 的项目源分支拉取最新的代码，此处为 zcs 的 master 分支</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull zcs <span class="hljs-keyword">master</span> <span class="hljs-title">--rebase</span><br></code></pre></td></tr></table></figure><ol start="4"><li>代码合并后推送到自己仓库的远程分支</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git push origin master 或 git push<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java核心（3）- 面向对象编程</title>
    <link href="/2023/04/15/Java%E6%A0%B8%E5%BF%83%EF%BC%883%EF%BC%89-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/04/15/Java%E6%A0%B8%E5%BF%83%EF%BC%883%EF%BC%89-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Java-可变参数"><a href="#Java-可变参数" class="headerlink" title="Java 可变参数"></a>Java 可变参数</h3><p><img src="/2023/04/15/Java%E6%A0%B8%E5%BF%83%EF%BC%883%EF%BC%89-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java_varables.png" alt="Java 可选参数"></p><p>可变参数必须要在参数列表的最后一位。<strong>当使用可变参数的时候，实际上是先创建了一个数组，该数组的大小就是可变参数的个数，然后将参数放入数组当中，再将数组传递给被调用的方法</strong>。</p><h3 id="Java-访问权限修饰符"><a href="#Java-访问权限修饰符" class="headerlink" title="Java 访问权限修饰符"></a>Java 访问权限修饰符</h3><ul><li>默认访问你权限（包访问权限）：没有任何修饰符的权限就是包访问权限，当前包的所有类都可以访问这个类的方法或变量。</li><li>private：这个类的方法或变量只能在该类中被访问。</li><li>protected：对于同一个包的类，这个类的方法或变量可以被访问；对于不同包的类，只有继承该类的类才可以访问该类的方法或变量。</li><li>public：这个类的方法或变量在任何地方都是可见。</li></ul><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包下</th><th>子类</th><th>任何地方</th></tr></thead><tbody><tr><td>public</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>protected</td><td>Yes</td><td>Yes</td><td>Yes</td><td></td></tr><tr><td>包访问权限</td><td>Yes</td><td>Yes</td><td></td><td></td></tr><tr><td>public</td><td>Yes</td><td></td><td></td><td></td></tr></tbody></table><h3 id="Java-代码初始块"><a href="#Java-代码初始块" class="headerlink" title="Java 代码初始块"></a>Java 代码初始块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    Car() &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造方法&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;代码初始化块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 输出：</span><br><span class="hljs-comment">代码初始化块</span><br><span class="hljs-comment">构造方法</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>从输出结果看，貌似是代码初始化块执行得更早，实际上并非如此。</p><p><img src="/2023/04/15/Java%E6%A0%B8%E5%BF%83%EF%BC%883%EF%BC%89-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/code_initialization.png" alt="代码初始化块执行时机"></p><p>实际上，构造方法在执行的时候会把代码初始化块放在构造方法中其他代码之前，所以，先看到了“代码初始化块”，后看到了“构造方法”。</p><h3 id="Java-接口"><a href="#Java-接口" class="headerlink" title="Java 接口"></a>Java 接口</h3><h4 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h4>]]></content>
    
    
    <categories>
      
      <category>Java核心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java核心（2）- 数组和字符串</title>
    <link href="/2023/04/13/Java%E6%A0%B8%E5%BF%83%EF%BC%882%EF%BC%89-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/04/13/Java%E6%A0%B8%E5%BF%83%EF%BC%882%EF%BC%89-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h3><h4 id="数组转换成-List"><a href="#数组转换成-List" class="headerlink" title="数组转换成 List"></a>数组转换成 List</h4><p>通过 Arrays 类的 <code>asList()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] anArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>List&lt;Integer&gt; aList = Arrays.asList(anArray);<br>System.out.println(aList.getClass());<br><span class="hljs-comment">// 输出：class java.util.Arrays$ArrayList</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>Arrays.asList 方法返回的 ArrayList 并不是 <code>java.util.ArrayList</code>，它其实是 Arrays 类的一个内部类 <code>java.util.Arrays$ArrayList</code>。如果需要添加元素或者删除元素的话，需要把它转成 <code>java.util.ArrayList</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; arrList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(aList);<br>System.out.println(arrList.getClass());<br><span class="hljs-comment">// 输出：class java.util.ArrayList</span><br></code></pre></td></tr></table></figure><p>Arrays.asList 的参数需要是 Integer 数组，如果是 int 类型的数值，则需要换另外一种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>List&lt;Integer&gt; list = Arrays.stream(array).boxed().collect(Collectors.toList());<br>System.out.println(list.getClass());<br><span class="hljs-comment">// 输出：class java.util.ArrayList</span><br></code></pre></td></tr></table></figure><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><p>使用 Arrays 类提供的 <code>sort()</code> 方法：</p><ul><li>基本数据类型按照升序排列；</li><li>实现了 Comparable 接口的对象按照 <code>compareTo()</code> 的排序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] anArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>&#125;;<br>Arrays.sort(anArray);<br>System.out.println(Arrays.stream(anArray).boxed().collect(Collectors.toList()));<br><span class="hljs-comment">// 输出：[1, 2, 4, 5, 8]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] yetAnotherArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>&#125;;<br>Arrays.sort(yetAnotherArray, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>,<br>                Comparator.comparing(String::toString).reversed());<br>System.out.println(Arrays.toString(Arrays.stream(yetAnotherArray).toArray()));<br><span class="hljs-comment">// 只对 1-3 位置上的元素进行反序，输出：[A, Z, E, B, C]</span><br></code></pre></td></tr></table></figure><h4 id="查找数组中的元素"><a href="#查找数组中的元素" class="headerlink" title="查找数组中的元素"></a>查找数组中的元素</h4><p>如果数组提前进行了排序，就可以使用二分查找法，这样效率就会更高一些。</p><p><code>Arrays.binarySearch()</code> 方法传递一个数组和要查找的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] anArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(anArray, <span class="hljs-number">4</span>);<br>System.out.println(index);<br><span class="hljs-comment">// 输出：3</span><br></code></pre></td></tr></table></figure><h4 id="打印数组"><a href="#打印数组" class="headerlink" title="打印数组"></a>打印数组</h4><p>1）stream 流打印数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">String [] strArray = &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;一枚有趣的程序员&quot;</span>&#125;;<br>Arrays.asList(strArray).forEach(System.out::println);<br>Stream.of(strArray).forEach(System.out::println);<br>Arrays.stream(strArray).forEach(System.out::println);<br><span class="hljs-comment">/* 均输出：</span><br><span class="hljs-comment">张三</span><br><span class="hljs-comment">李四</span><br><span class="hljs-comment">一枚有趣的程序员</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>2）Arrays 工具类打印数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String [] strArray = &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;一枚有趣的程序员&quot;</span>&#125;;<br>System.out.println(Arrays.toString(strArray));<br><span class="hljs-comment">// 输出：[张三, 李四, 一枚有趣的程序员]</span><br></code></pre></td></tr></table></figure><p><code>Arrays.toString()</code> 方法打印数组会打印出 <code>[]</code> 和 <code>,</code> 。</p><h4 id="POJO-打印规约"><a href="#POJO-打印规约" class="headerlink" title="POJO 打印规约"></a>POJO 打印规约</h4><p><img src="/2023/04/13/Java%E6%A0%B8%E5%BF%83%EF%BC%882%EF%BC%89-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/pojo_print.png" alt="阿里巴巴 Java 开发手册 POJO 打印规约"></p><h3 id="String-类源码"><a href="#String-类源码" class="headerlink" title="String 类源码"></a>String 类源码</h3><h4 id="String-类底层实现"><a href="#String-类底层实现" class="headerlink" title="String 类底层实现"></a>String 类底层实现</h4><p>Java 9 之前，String 是用 char 类型数组实现的，之后改成了 byte 类型数组实现，并增加了 coder 表示编码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java 9 之前</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br></code></pre></td></tr></table></figure><p>char 类型的数据在 JVM 中占用<strong>两个字节</strong>，并且使用的是 UTF-8 编码，使用 <code>char[]</code> 来表示 String 就会导致，即使 String 中的字符只用一个字节就能表示，也得占用两个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java 9 及之后</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;<br>    <span class="hljs-meta">@Stable</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span> coder;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hash;<br>&#125;<br></code></pre></td></tr></table></figure><p>从 <code>char[]</code> 到 <code>byte[]</code>，可以节省字符串占用的内存空间（char 占用 2 字节， byte 占用 1字节），同时 GC 次数也会减少。除了将 <code>char[]</code> 优化为 <code>byte[]</code>，还需要配合 Latin-1 的编码方式，该编码方式用<strong>单个字节</strong>表示字符，比 UTF-8 节省空间。</p><p>Java 9 及之后，Java 会根据字符串的内容自动设置为相应的编码，要么 Latin-1 要么 UTF-16（coder 字段）。也就是说，从 <code>char[]</code> 到 <code>byte[]</code>，<strong>中文是两个字节，纯英文是一个字节；在此之前，中文是两个字节，英文也是两个字节</strong>。</p><blockquote><p><a href="https://www.zhihu.com/question/447224628">https://www.zhihu.com/question/447224628</a></p></blockquote><p>为什么使用 <strong>UTF-16</strong> 而不是 UTF-8？</p><p>UTF-8 和 UTF-16 都是变长的：UTF-8 根据字符号的不同，用 1 个字节、2个字节、3个字节或 4 个字节存储一个字符，最小单位是 1 个字节； UTF-16 用 2 个字节 或 4 个字节 存储一个字符，最小单位是 2 个字节。</p><p>在 Java 中，一个字符（char）就是 2 个字节，占用 4 个字节的字符在 Java 中也是用两个 char 表示的；而 String 的各种操作也都是以 Java 的字符（char）为单位的，因此，UTF-16 在 Java 的世界里，就可以视为一个定长的编码。</p><p>然而，UTF-8 的最小单位是 1 个字节，对于 Java 来说，这就是一种变长的编码了，那对于 String 这种有随机访问方法（如 charAt，subString 方法等）的类来说，就很不方便。如果字符串中的每个字符占用的内存是不定长的，那么进行随机访问的时候，就需要从头开始数每个字符的长度，才能找到想要的字符。</p><h3 id="Java-字符串常量池"><a href="#Java-字符串常量池" class="headerlink" title="Java 字符串常量池"></a>Java 字符串常量池</h3><p>由于字符串的使用频率实在是太高了，所以 Java 虚拟机为了提高性能和减少内存开销，在创建字符串对象的时候进行了一些优化，特意为字符串开辟了一块空间——字符串常量池。</p><h4 id="new-String-方法创建了几个对象"><a href="#new-String-方法创建了几个对象" class="headerlink" title="new String() 方法创建了几个对象"></a>new String() 方法创建了几个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;二哥&quot;</span>);<br></code></pre></td></tr></table></figure><p>使用 <strong>new 关键字创建一个字符串对象</strong>时，Java 虚拟机会先在字符串常量池中查找有没有“二哥”这个字符串对象。</p><ul><li>如果有，就不会在字符串常量池中创建“二哥”这个对象了，直接在堆中创建一个“二哥”的字符串对象，然后将堆中这个“二哥”的对象地址返回赋值给变量 s。</li><li>如果没有，先在字符串常量池中创建一个“二哥”的字符串对象，然后再在堆中创建一个“二哥”的字符串对象，然后将堆中这个“二哥”的字符串对象地址返回赋值给变量 s。</li></ul><h4 id="字符串常量池的作用"><a href="#字符串常量池的作用" class="headerlink" title="字符串常量池的作用"></a>字符串常量池的作用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;二哥&quot;</span>;<br></code></pre></td></tr></table></figure><p>使用<strong>双引号的方式创建字符串对象</strong>时，Java 虚拟机会先在字符串常量池中查找有没有“二哥”这个字符串对象。</p><ul><li>如果有，则不创建任何对象，直接将字符串常量池中这个“二哥”的对象地址返回，赋给变量 s。</li><li>如果没有，在字符串常量池中创建“二哥”这个对象，然后将其地址返回，赋给变量 s。</li></ul><p>总结：new 的方式始终会创建一个对象，不管字符串的内容是否已经存在，而双引号的方式会重复利用字符串常量池中已经存在的对象。</p><h3 id="String-intern-方法"><a href="#String-intern-方法" class="headerlink" title="String.intern() 方法"></a>String.intern() 方法</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;二哥&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;三妹&quot;</span>);<br></code></pre></td></tr></table></figure><p>对于没有使用双引号声明的字符串对象，如果想把 s1 的内容也放入字符串常量池的话，可以调用 <code>String.intern()</code> 方法来完成。</p><p>注意：从 Java 7 开始，字符串常量池从永生代移动到了堆中，该变化直接影响了 <code>String.intern()</code> 方法的执行策略。</p><ul><li>Java 7 之前，执行 <code>String.intern()</code> 方法的时候，不管对象在堆中是否已经创建，字符串常量池中仍然会创建一个内容完全相同的新对象。</li><li>Java 7 及之后，由于字符串常量池放在了堆中，执行 <code>String.intern()</code> 方法的时候，如果对象在堆中已经创建了，字符串常量池中就不需要再创建新的对象了，而是直接保存堆中对象的引用，也就节省了一部分的内存空间。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;二哥三妹&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> s1.intern();<br>System.out.println(s1 == s2);<br><span class="hljs-comment">// 输出：false</span><br></code></pre></td></tr></table></figure><p>第一行代码：字符串常量池中先创建一个“二哥三妹”的对象，然后堆中再创建一个“二哥三妹”的对象，s1 引用的是堆中的对象。</p><p>第二行代码：<code>intern()</code> 方法从字符串常量池中查找“二哥三妹”这个字符串是否存在，此时时存在的，所以 s2 引用的时字符串常量池中的对象。</p><p>因此，s1 和 s2 的引用地址时不同的，一个来自堆，一个来自字符串常量池，所以输出 false。</p><p><img src="/2023/04/13/Java%E6%A0%B8%E5%BF%83%EF%BC%882%EF%BC%89-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/string_intern.png" alt="String.intern 方法 引用示例1"></p>]]></content>
    
    
    <categories>
      
      <category>Java核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java字符串编码</tag>
      
      <tag>Java字符串常量池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心（1）- 语法基础</title>
    <link href="/2023/04/12/Java%E6%A0%B8%E5%BF%83%EF%BC%881%EF%BC%89-%20%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/12/Java%E6%A0%B8%E5%BF%83%EF%BC%881%EF%BC%89-%20%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="Java-数据类型"><a href="#Java-数据类型" class="headerlink" title="Java 数据类型"></a>Java 数据类型</h3><ul><li>基本数据类型：包括 boolean、char、byte、short、int、long、float 和 double，共 8 种。</li></ul><table><thead><tr><th>数据类型</th><th>默认值</th><th>大小</th><th>取值范围（包含上下界）</th></tr></thead><tbody><tr><td>boolean</td><td>false</td><td>1 比特</td><td>true 和 false</td></tr><tr><td>char</td><td>‘\u0000’</td><td>2 字节</td><td>\u0000（十进制等效值为 0）~\uffff（即为 65535）</td></tr><tr><td>byte</td><td>0</td><td>1 字节</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>0</td><td>2 字节</td><td>-32768 ~ 32767</td></tr><tr><td>int</td><td>0</td><td>4 字节</td><td>-2^31 ~ 2^31 - 1</td></tr><tr><td>long</td><td>0L</td><td>8 字节</td><td>-2^63 ~ 2^63 -1</td></tr><tr><td>float</td><td>0.0f</td><td>4 字节</td><td>-</td></tr><tr><td>double</td><td>0.0</td><td>8 字节</td><td>-</td></tr></tbody></table><ul><li>引用数据类型：除了基本数据类型以外的类型，都是所谓的引用类型。常见的有<strong>数组</strong>、class（也就是<strong>类</strong>），以及<strong>接口</strong>（指向的是实现接口的类的对象）。</li></ul><h4 id="int-和-char-类型互转"><a href="#int-和-char-类型互转" class="headerlink" title="int 和 char 类型互转"></a>int 和 char 类型互转</h4><p>1）可以通过强制类型转换将整型 int 转换为字符 char。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">valueInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">65</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">valueChar</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) valueInt;<br>System.out.println(valueChar);<br><span class="hljs-comment">// 输出： A</span><br></code></pre></td></tr></table></figure><p>输出 <code>A</code> （其 ASCII 值可通过整数 65 表示）。</p><p>2） 可以使用 <code>Character.forDigit()</code> 方法将整型 int 转换为字符 char，参数 radix 为基数，十进制为 10，十六进制为 16。</p><p>其中，若 valueInt 超过了 radix，则会输出空：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">radix</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">valueInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">valueChar</span> <span class="hljs-operator">=</span> Character.forDigit(valueInt, radix);<br>System.out.println(valueChar);<br><span class="hljs-comment">// 输出：空（&#x27;\0&#x27;）</span><br></code></pre></td></tr></table></figure><p>当大于十进制时（radix &gt; 10），大于 9 的数字会用字母表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">radix</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">valueInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">valueChar</span> <span class="hljs-operator">=</span> Character.forDigit(valueInt, radix);<br>System.out.println(valueChar);<br><span class="hljs-comment">// 输出：c</span><br></code></pre></td></tr></table></figure><p>3）使用 int 的包装器类型 Integer 的 <code>toString()</code> 方法+String 的 <code>charAt()</code> 方法转成 char。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">value_int</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">value_char</span> <span class="hljs-operator">=</span> Integer.toString(value_int).charAt(<span class="hljs-number">0</span>);<br>System.out.println(value_char);<br><span class="hljs-comment">// 输出：1（&#x27;1&#x27;）</span><br></code></pre></td></tr></table></figure><p>4）简单的 char 转 int，可以直接赋值（发生了自动类型转换）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(a);<br><span class="hljs-comment">// 输出：97</span><br></code></pre></td></tr></table></figure><h4 id="自动装箱和自动拆箱"><a href="#自动装箱和自动拆箱" class="headerlink" title="自动装箱和自动拆箱"></a>自动装箱和自动拆箱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动装箱，等同于 new Integer(42)</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">integerValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>; <br><span class="hljs-comment">// 自动拆箱，等同于 integerValue.intValue()</span><br><span class="hljs-type">int</span> <span class="hljs-variable">primitiveValue</span> <span class="hljs-operator">=</span> integerValue; <br></code></pre></td></tr></table></figure><h4 id="基本数据类型和引用数据类型的差别"><a href="#基本数据类型和引用数据类型的差别" class="headerlink" title="基本数据类型和引用数据类型的差别"></a>基本数据类型和引用数据类型的差别</h4><p>基本数据类型：</p><ul><li>变量名指向具体的数值。</li><li>存在栈上。</li></ul><p>引用数据类型：</p><ul><li>变量名指向存储对象的内存地址，在栈上。</li><li>内存地址指向的对象存储在堆上。</li></ul><h4 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h4><blockquote><p><a href="https://www.zhihu.com/question/19729973/answer/2238950166">什么是堆？什么是栈？他们之间有什么区别和联系？</a></p></blockquote><p>堆（heap）：程序<strong>运行时</strong>在内存中申请的空间，按需申请、动态分配。当需要一个对象时，只需要通过 new 关键字写一行代码即可，当执行这行代码时，会自动在内存的“堆”区分配空间</p><p>栈（stack）：程序运行时自动拥有的一小块内存，大小在编译期时由编译器参数决定，用于局部变量的存放或者函数调用栈的保存。</p><p>举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上面这段代码，其中的变量（包含基本数据类型和引用数据类型）在堆和栈中的存储如下所示。</p><p><img src="/2023/04/12/Java%E6%A0%B8%E5%BF%83%EF%BC%881%EF%BC%89-%20%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/example_heap_stack.png" alt="堆和栈的存储"></p><h3 id="Java-数据类型转换"><a href="#Java-数据类型转换" class="headerlink" title="Java 数据类型转换"></a>Java 数据类型转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>自动类型转换遵循以下规则：</p><ul><li>如果任何操作数是 double 类型，其他操作数将被转换为 double 类型。</li><li>否则，如果任何操作数是 float 类型，其他操作数将被转换为 float 类型。</li><li>否则，如果任何操作数是 long 类型，其他操作数将被转换为 long 类型。</li><li>否则，所有操作数将被转换为 int 类型。</li></ul><p>自动类型转换只发生在兼容类型之间。</p><p>从左到右：从较小的数据类型到较大的数据类型，这一方向的类型转换是安全的。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">byte</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">short</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">int</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">long</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">float</span> -&gt;</span> double<br><span class="hljs-function"><span class="hljs-title">char</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">int</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">long</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">float</span> -&gt;</span> double<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> char 类型比较特殊，char 可以自动转换成 int、long、float 和 double，但 char 无法与 byte、short 进行自动转换（两个方向都不行）。</p><p>&#x3D;&#x3D;自动类型转换可能引起的的编译错误&#x3D;&#x3D;，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>b = b * <span class="hljs-number">2</span>;<br><span class="hljs-comment">// Type mismatch: cannot convert from int to byte</span><br></code></pre></td></tr></table></figure><p>代码第二行进行表达式求值时，由于 2 是 int 类型，因此操作数 b 会被自动提升为 int 型，计算结果也被提升为 int 型，不强制转换它就不能被赋为 byte 型。因此，需要使用显式的强制类型转换，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>b = (<span class="hljs-type">byte</span>) b * <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h3 id="Java-基本数据类型缓存池"><a href="#Java-基本数据类型缓存池" class="headerlink" title="Java 基本数据类型缓存池"></a>Java 基本数据类型缓存池</h3><p>基本数据类型的包装类除了 Float 和 Double 之外，其他六个包装器类（Byte、Short、Integer、Long、Character、Boolean）都有<strong>常量缓存池</strong>。</p><ul><li>Byte：-128~127，也就是所有的 byte 值</li><li>Short：-128~127</li><li>Long：-128~127</li><li>Character：\u0000 - \u007F</li><li>Boolean：true 和 false</li></ul><p><code>new Integer(18) 与 Integer.valueOf(18)</code> 的区别是什么？</p><ul><li><code>new Integer(18)</code> 每次都会新建一个对象;</li><li><code>Integer.valueOf(18)</code> 会使⽤用缓存池中的对象，多次调用只会取同一个对象的引用。</li></ul><p>对于 Integer 包装类，其内部内置了 256 个 Integer 类型的缓存数据，当使用的数据范围在 -128~127 之间时，会直接返回常量池中数据的引用，而不是创建对象，超过这个范围时会创建新的对象。</p><h3 id="Java-运算符"><a href="#Java-运算符" class="headerlink" title="Java 运算符"></a>Java 运算符</h3><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p><img src="/2023/04/12/Java%E6%A0%B8%E5%BF%83%EF%BC%881%EF%BC%89-%20%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/java_bit_calculate.png" alt="Java 位运算符"></p><ul><li><code>&lt;&lt;</code>：按位左移，补 0</li><li><code>&gt;&gt;</code>：按位右移，补符号位</li><li><code>&gt;&gt;&gt;</code>：按位右移，补 0</li></ul><blockquote><p><a href="https://www.cnblogs.com/andy-0212/p/10323502.html">负数的二进制表示方法（正数：原码，负数：补码）</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java数据类型</tag>
      
      <tag>Java位运算</tag>
      
      <tag>Java常量缓存池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Java之前</title>
    <link href="/2023/04/12/%E5%AD%A6%E4%B9%A0Java%E4%B9%8B%E5%89%8D/"/>
    <url>/2023/04/12/%E5%AD%A6%E4%B9%A0Java%E4%B9%8B%E5%89%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="JDK、JRE与JVM"><a href="#JDK、JRE与JVM" class="headerlink" title="JDK、JRE与JVM"></a>JDK、JRE与JVM</h3><p>JDK（Java Development Kit）是用于开发 Java 应用程序的软件环境。里面包含运行时环境（JRE）和其他 Java 开发所需的工具，比如说解释器（java）、编译器（javac）、文档生成器（javadoc）等等。</p><p>JRE（Java Runtime Environment）是用于运行 Java 应用程序的软件环境。也就是说，如果只想运行 Java 程序而不需要开发 Java 程序的话，只需要安装 JRE 就可以了。</p><p>JVM (Java Virtual Machine) ，也就是 Java 虚拟机，由一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域等组成，屏蔽了不同操作系统（macOS、Windows、Linux）的差异性，使得 Java 能够“一次编译，到处运行”。</p><p><img src="/2023/04/12/%E5%AD%A6%E4%B9%A0Java%E4%B9%8B%E5%89%8D/jdk_jre_jvm.png" alt="JDK、JRE与JVM的关系"></p><h3 id="Windows下使用命令行安装JDK"><a href="#Windows下使用命令行安装JDK" class="headerlink" title="Windows下使用命令行安装JDK"></a>Windows下使用命令行安装JDK</h3><p>使用 <strong>Chocolatey</strong>，这是一个 Windows 下的命令行软件管理器，可以方便开发者像在 Linux 下使用 yum 命令来安装软件，或者像在 macOS 下使用 brew 命令来安装软件，非常酷炫。</p><blockquote><ul><li>官方地址：<a href="https://chocolatey.org/">https://chocolatey.org/</a></li><li>安装文档：<a href="https://chocolatey.org/install#individual">https://chocolatey.org/install#individual</a></li><li>Github:  <a href="https://github.com/chocolatey/choco">https://github.com/chocolatey/choco</a></li></ul></blockquote><p>安装 Chocolatey 的步骤如下：</p><p>第一步，以管理员的身份打开 powershell 命令行。</p><p>第二步，执行以下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Set</span>-ExecutionPolicy Bypass -Scope Process -Force; [<span class="hljs-keyword">System</span>.Net.ServicePointManager]::SecurityProtocol = [<span class="hljs-keyword">System</span>.Net.ServicePointManager]::SecurityProtocol -bor <span class="hljs-number">3072</span>; iex ((<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.Net.WebClient).DownloadString(<span class="hljs-string">&#x27;https://community.chocolatey.org/install.ps1&#x27;</span>))<br></code></pre></td></tr></table></figure><p>安装完成后输入 <code>choco</code> 命令确认是否安装成功。</p><p><img src="/2023/04/12/%E5%AD%A6%E4%B9%A0Java%E4%B9%8B%E5%89%8D/chocolatey_install_complete.png" alt="Chocolatey 安装完成"></p><p>几个常用的操作命令：</p><ul><li>choco search xxx，查找 xxx 安装包</li><li>choco info xxx，查看 xxx 安装包信息</li><li>choco install xxx，安装 xxx 软件</li><li>choco upgrade xxx，升级 xxx 软件</li><li>choco uninstall xxx， 卸载 xxx 软件</li></ul><p>如何知道 chocolatey 仓库中都有哪些安装包可用呢？</p><p>可以通过上面提到的命令行的方式，也可以访问官方仓库进行筛选。</p><blockquote><p><a href="https://community.chocolatey.org/packages">https://community.chocolatey.org/packages</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>JVM</tag>
      
      <tag>Chocolatey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员的自我修养（学习方法论）</title>
    <link href="/2023/04/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA%EF%BC%89/"/>
    <url>/2023/04/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/BV1XK4y1U7HT/?spm_id_from=333.337.search-card.all.click&vd_source=81aef1ecdd6573765b178db3ef063ebf">5年从菜鸟程序员成长为架构师的【学习法】【记忆法】– 告别“学的没有忘得快”</a></p></blockquote><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><ul><li><p>一个电子笔记或博客。</p></li><li><p>一个项目：推荐使用idea的父Pom多个子module继承结构的项目（顺便练手搭建项目），并且上传到自己的github或者码云上面。</p></li></ul><h3 id="学习阶段"><a href="#学习阶段" class="headerlink" title="学习阶段"></a>学习阶段</h3><ul><li>看一系列视频或者一本书籍，做笔记，做笔记不要盲目把教学者或者书上的内容一字不落写在笔记上，要有自己理解，用自己的话描述出来并记录。</li></ul><h3 id="实践阶段"><a href="#实践阶段" class="headerlink" title="实践阶段"></a>实践阶段</h3><ul><li>思考所学知识可以用在什么场景上（一般书籍或者视频都会说吧），然后设计场景将所学知识运用在上面，期间只能看笔记或者网上搜索api，如果笔记看不懂，说明笔记内容表达方式有问题，此时需要返回去学习阶段调整笔记内容和记录方式，直到自己再去看能迅速理解的内容。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结：理解转化做记录，结合场景学技术，一个项目全罩住</p>]]></content>
    
    
    <categories>
      
      <category>学习方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/04/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/04/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>测试文章</p><img src="/2023/04/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" class="" title="图片引用方法一"><p><img src="/2023/04/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" alt="图片引用方法二"></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/11/hello-world/"/>
    <url>/2023/04/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
