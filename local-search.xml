<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java语法基础</title>
    <link href="/2023/04/12/Java%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/12/Java%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="Java-数据类型"><a href="#Java-数据类型" class="headerlink" title="Java 数据类型"></a>Java 数据类型</h3><ul><li>基本数据类型：包括 boolean、char、byte、short、int、long、float 和 double，共 8 种。</li></ul><table><thead><tr><th>数据类型</th><th>默认值</th><th>大小</th><th>取值范围（包含上下界）</th></tr></thead><tbody><tr><td>boolean</td><td>false</td><td>1 比特</td><td>true 和 false</td></tr><tr><td>char</td><td>‘\u0000’</td><td>2 字节</td><td><strong>\u0000</strong>（十进制等效值为 0）~<strong>\uffff</strong>（即为 65535）</td></tr><tr><td>byte</td><td>0</td><td>1 字节</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>0</td><td>2 字节</td><td>-32768 ~ 32767</td></tr><tr><td>int</td><td>0</td><td>4 字节</td><td>-2^31 ~ 2^31 - 1</td></tr><tr><td>long</td><td>0L</td><td>8 字节</td><td>-2^63 ~ 2^63 -1</td></tr><tr><td>float</td><td>0.0f</td><td>4 字节</td><td>-</td></tr><tr><td>double</td><td>0.0</td><td>8 字节</td><td>-</td></tr></tbody></table><ul><li>引用数据类型：除了基本数据类型以外的类型，都是所谓的引用类型。常见的有<strong>数组</strong>、class（也就是<strong>类</strong>），以及<strong>接口</strong>（指向的是实现接口的类的对象）。</li></ul><h4 id="int-和-char-类型互转"><a href="#int-和-char-类型互转" class="headerlink" title="int 和 char 类型互转"></a>int 和 char 类型互转</h4><p>1）可以通过强制类型转换将整型 int 转换为字符 char。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">valueInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">65</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">valueChar</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) valueInt;<br>System.out.println(valueChar);<br><span class="hljs-comment">// 输出： A</span><br></code></pre></td></tr></table></figure><p>输出 <code>A</code> （其 ASCII 值可通过整数 65 表示）。</p><p>2） 可以使用 <code>Character.forDigit()</code> 方法将整型 int 转换为字符 char，参数 radix 为基数，十进制为 10，十六进制为 16。</p><p>其中，若 valueInt 超过了 radix，则会输出空：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">radix</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">valueInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">valueChar</span> <span class="hljs-operator">=</span> Character.forDigit(valueInt, radix);<br>System.out.println(valueChar);<br><span class="hljs-comment">// 输出：空（&#x27;\0&#x27;）</span><br></code></pre></td></tr></table></figure><p>当大于十进制时（radix &gt; 10），大于 9 的数字会用字母表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">radix</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">valueInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">valueChar</span> <span class="hljs-operator">=</span> Character.forDigit(valueInt, radix);<br>System.out.println(valueChar);<br><span class="hljs-comment">// 输出：c</span><br></code></pre></td></tr></table></figure><p>3）使用 int 的包装器类型 Integer 的 <code>toString()</code> 方法+String 的 <code>charAt()</code> 方法转成 char。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">value_int</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">value_char</span> <span class="hljs-operator">=</span> Integer.toString(value_int).charAt(<span class="hljs-number">0</span>);<br>System.out.println(value_char);<br><span class="hljs-comment">// 输出：1（&#x27;1&#x27;）</span><br></code></pre></td></tr></table></figure><p>4）简单的 char 转 int，可以直接赋值（发生了自动类型转换）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(a);<br><span class="hljs-comment">// 输出：97</span><br></code></pre></td></tr></table></figure><h4 id="自动装箱和自动拆箱"><a href="#自动装箱和自动拆箱" class="headerlink" title="自动装箱和自动拆箱"></a>自动装箱和自动拆箱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动装箱，等同于 new Integer(42)</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">integerValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>; <br><span class="hljs-comment">// 自动拆箱，等同于 integerValue.intValue()</span><br><span class="hljs-type">int</span> <span class="hljs-variable">primitiveValue</span> <span class="hljs-operator">=</span> integerValue; <br></code></pre></td></tr></table></figure><h4 id="基本数据类型和引用数据类型的差别"><a href="#基本数据类型和引用数据类型的差别" class="headerlink" title="基本数据类型和引用数据类型的差别"></a>基本数据类型和引用数据类型的差别</h4><p>基本数据类型：</p><ul><li>变量名指向具体的数值。</li><li>存在栈上。</li></ul><p>引用数据类型：</p><ul><li>变量名指向存储对象的内存地址，在栈上。</li><li>内存地址指向的对象存储在堆上。</li></ul><h4 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h4><blockquote><p><a href="https://www.zhihu.com/question/19729973/answer/2238950166">什么是堆？什么是栈？他们之间有什么区别和联系？</a></p></blockquote><p>堆（heap）：程序<strong>运行时</strong>在内存中申请的空间，按需申请、动态分配。当需要一个对象时，只需要通过 new 关键字写一行代码即可，当执行这行代码时，会自动在内存的“堆”区分配空间</p><p>栈（stack）：程序运行时自动拥有的一小块内存，大小在编译期时由编译器参数决定，用于局部变量的存放或者函数调用栈的保存。</p><p>举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上面这段代码，其中的变量（包含基本数据类型和引用数据类型）在堆和栈中的存储如下所示。</p><p><img src="/2023/04/12/Java%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/example_heap_stack.png" alt="堆和栈的存储"></p><h3 id="Java-数据类型转换"><a href="#Java-数据类型转换" class="headerlink" title="Java 数据类型转换"></a>Java 数据类型转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>自动类型转换遵循以下规则：</p><ul><li>如果任何操作数是 double 类型，其他操作数将被转换为 double 类型。</li><li>否则，如果任何操作数是 float 类型，其他操作数将被转换为 float 类型。</li><li>否则，如果任何操作数是 long 类型，其他操作数将被转换为 long 类型。</li><li>否则，所有操作数将被转换为 int 类型。</li></ul><p>自动类型转换只发生在兼容类型之间。</p><p>从左到右：从较小的数据类型到较大的数据类型，这一方向的类型转换是安全的。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">byte</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">short</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">int</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">long</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">float</span> -&gt;</span> double<br><span class="hljs-function"><span class="hljs-title">char</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">int</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">long</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">float</span> -&gt;</span> double<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> char 类型比较特殊，char 可以自动转换成 int、long、float 和 double，但 char 无法与 byte、short 进行自动转换（两个方向都不行）。</p><p>&#x3D;&#x3D;自动类型转换可能引起的的编译错误&#x3D;&#x3D;，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>b = b * <span class="hljs-number">2</span>;<br><span class="hljs-comment">// Type mismatch: cannot convert from int to byte</span><br></code></pre></td></tr></table></figure><p>代码第二行进行表达式求值时，由于 2 是 int 类型，因此操作数 b 会被自动提升为 int 型，计算结果也被提升为 int 型，不强制转换它就不能被赋为 byte 型。因此，需要使用显式的强制类型转换，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>b = (<span class="hljs-type">byte</span>) b * <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h3 id="Java-基本数据类型缓存池"><a href="#Java-基本数据类型缓存池" class="headerlink" title="Java 基本数据类型缓存池"></a>Java 基本数据类型缓存池</h3><p>基本数据类型的包装类除了 Float 和 Double 之外，其他六个包装器类（Byte、Short、Integer、Long、Character、Boolean）都有<strong>常量缓存池</strong>。</p><ul><li>Byte：-128~127，也就是所有的 byte 值</li><li>Short：-128~127</li><li>Long：-128~127</li><li>Character：\u0000 - \u007F</li><li>Boolean：true 和 false</li></ul><p><code>new Integer(18) 与 Integer.valueOf(18)</code> 的区别是什么？</p><ul><li><code>new Integer(18)</code> 每次都会新建一个对象;</li><li><code>Integer.valueOf(18)</code> 会使⽤用缓存池中的对象，多次调用只会取同一个对象的引用。</li></ul><p>对于 Integer 包装类，其内部内置了 256 个 Integer 类型的缓存数据，当使用的数据范围在 -128~127 之间时，会直接返回常量池中数据的引用，而不是创建对象，超过这个范围时会创建新的对象。</p><h3 id="Java-运算符"><a href="#Java-运算符" class="headerlink" title="Java 运算符"></a>Java 运算符</h3><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p><img src="/2023/04/12/Java%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/java_bit_calculate.png" alt="Java 位运算符"></p><ul><li><code>&lt;&lt;</code>：按位左移，补 0</li><li><code>&gt;&gt;</code>：按位右移，补符号位</li><li><code>&gt;&gt;&gt;</code>：按位右移，补 0</li></ul><blockquote><p><a href="https://www.cnblogs.com/andy-0212/p/10323502.html">负数的二进制表示方法（正数：原码，负数：补码）</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java数据类型</tag>
      
      <tag>Java位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Java之前</title>
    <link href="/2023/04/12/%E5%AD%A6%E4%B9%A0Java%E4%B9%8B%E5%89%8D/"/>
    <url>/2023/04/12/%E5%AD%A6%E4%B9%A0Java%E4%B9%8B%E5%89%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="JDK、JRE与JVM"><a href="#JDK、JRE与JVM" class="headerlink" title="JDK、JRE与JVM"></a>JDK、JRE与JVM</h3><p>JDK（Java Development Kit）是用于开发 Java 应用程序的软件环境。里面包含运行时环境（JRE）和其他 Java 开发所需的工具，比如说解释器（java）、编译器（javac）、文档生成器（javadoc）等等。</p><p>JRE（Java Runtime Environment）是用于运行 Java 应用程序的软件环境。也就是说，如果只想运行 Java 程序而不需要开发 Java 程序的话，只需要安装 JRE 就可以了。</p><p>JVM (Java Virtual Machine) ，也就是 Java 虚拟机，由一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域等组成，屏蔽了不同操作系统（macOS、Windows、Linux）的差异性，使得 Java 能够“一次编译，到处运行”。</p><p><img src="/2023/04/12/%E5%AD%A6%E4%B9%A0Java%E4%B9%8B%E5%89%8D/jdk_jre_jvm.png" alt="JDK、JRE与JVM的关系"></p><h3 id="Windows下使用命令行安装JDK"><a href="#Windows下使用命令行安装JDK" class="headerlink" title="Windows下使用命令行安装JDK"></a>Windows下使用命令行安装JDK</h3><p>使用 <strong>Chocolatey</strong>，这是一个 Windows 下的命令行软件管理器，可以方便开发者像在 Linux 下使用 yum 命令来安装软件，或者像在 macOS 下使用 brew 命令来安装软件，非常酷炫。</p><blockquote><ul><li>官方地址：<a href="https://chocolatey.org/">https://chocolatey.org/</a></li><li>安装文档：<a href="https://chocolatey.org/install#individual">https://chocolatey.org/install#individual</a></li><li>Github:  <a href="https://github.com/chocolatey/choco">https://github.com/chocolatey/choco</a></li></ul></blockquote><p>安装 Chocolatey 的步骤如下：</p><p>第一步，以管理员的身份打开 powershell 命令行。</p><p>第二步，执行以下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Set</span>-ExecutionPolicy Bypass -Scope Process -Force; [<span class="hljs-keyword">System</span>.Net.ServicePointManager]::SecurityProtocol = [<span class="hljs-keyword">System</span>.Net.ServicePointManager]::SecurityProtocol -bor <span class="hljs-number">3072</span>; iex ((<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.Net.WebClient).DownloadString(<span class="hljs-string">&#x27;https://community.chocolatey.org/install.ps1&#x27;</span>))<br></code></pre></td></tr></table></figure><p>安装完成后输入 <code>choco</code> 命令确认是否安装成功。</p><p><img src="/2023/04/12/%E5%AD%A6%E4%B9%A0Java%E4%B9%8B%E5%89%8D/chocolatey_install_complete.png" alt="Chocolatey 安装完成"></p><p>几个常用的操作命令：</p><ul><li>choco search xxx，查找 xxx 安装包</li><li>choco info xxx，查看 xxx 安装包信息</li><li>choco install xxx，安装 xxx 软件</li><li>choco upgrade xxx，升级 xxx 软件</li><li>choco uninstall xxx， 卸载 xxx 软件</li></ul><p>如何知道 chocolatey 仓库中都有哪些安装包可用呢？</p><p>可以通过上面提到的命令行的方式，也可以访问官方仓库进行筛选。</p><blockquote><p><a href="https://community.chocolatey.org/packages">https://community.chocolatey.org/packages</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>JVM</tag>
      
      <tag>Chocolatey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员的自我修养（学习方法论）</title>
    <link href="/2023/04/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA%EF%BC%89/"/>
    <url>/2023/04/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/BV1XK4y1U7HT/?spm_id_from=333.337.search-card.all.click&vd_source=81aef1ecdd6573765b178db3ef063ebf">5年从菜鸟程序员成长为架构师的【学习法】【记忆法】– 告别“学的没有忘得快”</a></p></blockquote><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><ul><li><p>一个电子笔记或博客。</p></li><li><p>一个项目：推荐使用idea的父Pom多个子module继承结构的项目（顺便练手搭建项目），并且上传到自己的github或者码云上面。</p></li></ul><h3 id="学习阶段"><a href="#学习阶段" class="headerlink" title="学习阶段"></a>学习阶段</h3><ul><li>看一系列视频或者一本书籍，做笔记，做笔记不要盲目把教学者或者书上的内容一字不落写在笔记上，要有自己理解，用自己的话描述出来并记录。</li></ul><h3 id="实践阶段"><a href="#实践阶段" class="headerlink" title="实践阶段"></a>实践阶段</h3><ul><li>思考所学知识可以用在什么场景上（一般书籍或者视频都会说吧），然后设计场景将所学知识运用在上面，期间只能看笔记或者网上搜索api，如果笔记看不懂，说明笔记内容表达方式有问题，此时需要返回去学习阶段调整笔记内容和记录方式，直到自己再去看能迅速理解的内容。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结：理解转化做记录，结合场景学技术，一个项目全罩住</p>]]></content>
    
    
    <categories>
      
      <category>学习方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/04/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/04/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>测试文章</p><img src="/2023/04/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" class="" title="图片引用方法一"><p><img src="/2023/04/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" alt="图片引用方法二"></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/11/hello-world/"/>
    <url>/2023/04/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
